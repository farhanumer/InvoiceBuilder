import SwiftUI
import SwiftData
import UIKit

public struct InvoiceBuilderView: View {
    @Environment(\.modelContext) private var modelContext
    @Environment(\.dismiss) private var dismiss
    
    @Query private var clients: [ClientEntity]
    @Query private var serviceItems: [ServiceItemEntity]
    @Query private var businessProfiles: [BusinessProfileEntity]
    
    @State private var invoice: Invoice
    @State private var selectedClient: Client?
    @State private var showingClientPicker = false
    @State private var showingServiceItemPicker = false
    @State private var showingTemplateSelection = false
    @State private var selectedTemplate: InvoiceTemplate?
    @State private var isLoading = false
    @State private var showingSaveConfirmation = false
    
    // Form validation
    private var isFormValid: Bool {
        !invoice.invoiceNumber.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty &&
        selectedClient != nil &&
        !invoice.items.isEmpty
    }
    
    private var businessProfile: BusinessProfile? {
        businessProfiles.first.map { BusinessProfile(from: $0) }
    }
    
    public init(existingInvoice: Invoice? = nil) {
        if let existingInvoice = existingInvoice {
            self._invoice = State(initialValue: existingInvoice)
            self._selectedClient = State(initialValue: existingInvoice.client)
        } else {
            // Create a dummy client for new invoice
            let dummyClient = Client(name: "", email: "")
            self._invoice = State(initialValue: Invoice(
                invoiceNumber: "",
                date: Date(),
                dueDate: Calendar.current.date(byAdding: .day, value: 30, to: Date()) ?? Date(),
                client: dummyClient
            ))
            self._selectedClient = State(initialValue: nil)
        }
    }
    
    public var body: some View {
        NavigationStack {
            Form {
                invoiceDetailsSection
                clientSection
                itemsSection
                totalsSection
                templateSection
                notesSection
            }
            .navigationTitle(invoice.id == UUID() ? "New Invoice" : "Edit Invoice")
            #if os(iOS)
            .navigationBarTitleDisplayMode(.large)
            #endif
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .primaryAction) {
                    Button("Save") {
                        showingSaveConfirmation = true
                    }
                    .fontWeight(.semibold)
                    .disabled(!isFormValid)
                }
            }
            .onAppear {
                setupNewInvoice()
            }
        }
        .sheet(isPresented: $showingClientPicker) {
            ClientPickerView(clients: clients.map { Client(from: $0) }) { client in
                selectedClient = client
                invoice.client = client
                showingClientPicker = false
            }
        }
        .sheet(isPresented: $showingServiceItemPicker) {
            ServiceItemPickerView(serviceItems: serviceItems.map { ServiceItem(from: $0) }) { serviceItem in
                let invoiceItem = serviceItem.toInvoiceItem()
                invoice.addItem(invoiceItem)
                showingServiceItemPicker = false
            }
        }
        .sheet(isPresented: $showingTemplateSelection) {
            TemplateSelectionView { template in
                selectedTemplate = template
                invoice.templateId = template.name
                showingTemplateSelection = false
            }
        }
        .confirmationDialog(
            "Save Invoice",
            isPresented: $showingSaveConfirmation,
            titleVisibility: .visible
        ) {
            Button("Save as Draft") {
                saveInvoice(status: .draft)
            }
            Button("Save and Send") {
                saveInvoice(status: .sent)
            }
            Button("Cancel", role: .cancel) { }
        } message: {
            Text("Choose how you'd like to save this invoice.")
        }
        .overlay {
            if isLoading {
                LoadingOverlay()
            }
        }
    }
    
    // MARK: - Form Sections
    
    @ViewBuilder
    private var invoiceDetailsSection: some View {
        Section("Invoice Details") {
            HStack {
                Text("Invoice Number")
                    .fontWeight(.medium)
                
                Spacer()
                
                TextField("INV-001", text: $invoice.invoiceNumber)
                    .textFieldStyle(.roundedBorder)
                    .frame(maxWidth: 120)
                    #if os(iOS)
                    .keyboardType(.numbersAndPunctuation)
                    #endif
            }
            
            DatePicker(
                "Issue Date",
                selection: $invoice.date,
                displayedComponents: .date
            )
            
            DatePicker(
                "Due Date",
                selection: $invoice.dueDate,
                displayedComponents: .date
            )
            
            if let poBinding = Binding<String>(
                get: { invoice.poNumber ?? "" },
                set: { invoice.poNumber = $0.isEmpty ? nil : $0 }
            ) {
                HStack {
                    Text("PO Number")
                        .fontWeight(.medium)
                    
                    Spacer()
                    
                    TextField("Optional", text: poBinding)
                        .textFieldStyle(.roundedBorder)
                        .frame(maxWidth: 150)
                }
            }
        }
    }
    
    @ViewBuilder
    private var clientSection: some View {
        Section("Client") {
            if let client = selectedClient {
                HStack {
                    Group {
                        if let avatarData = client.avatarData, let uiImage = UIImage(data: avatarData) {
                            Image(uiImage: uiImage)
                                .resizable()
                                .aspectRatio(contentMode: .fill)
                        } else {
                            Circle()
                                .fill(.gray.opacity(0.3))
                                .overlay {
                                    Text(String(client.name.prefix(1)))
                                        .font(.headline)
                                        .fontWeight(.semibold)
                                        .foregroundStyle(.white)
                                }
                        }
                    }
                    .frame(width: 40, height: 40)
                    .clipShape(Circle())
                    
                    VStack(alignment: .leading, spacing: 2) {
                        Text(client.name)
                            .font(.headline)
                        Text(client.email)
                            .font(.caption)
                            .foregroundStyle(.secondary)
                    }
                    
                    Spacer()
                    
                    Button("Change") {
                        showingClientPicker = true
                    }
                    .font(.caption)
                    .foregroundStyle(.blue)
                }
            } else {
                Button {
                    showingClientPicker = true
                } label: {
                    HStack {
                        Image(systemName: "person.badge.plus")
                            .foregroundStyle(.blue)
                        Text("Select Client")
                            .foregroundStyle(.blue)
                        Spacer()
                        Image(systemName: "chevron.right")
                            .font(.caption)
                            .foregroundStyle(.tertiary)
                    }
                }
            }
        }
    }
    
    @ViewBuilder
    private var itemsSection: some View {
        Section {
            if invoice.items.isEmpty {
                Button {
                    showingServiceItemPicker = true
                } label: {
                    HStack {
                        Image(systemName: "plus.circle.fill")
                            .foregroundStyle(.green)
                        Text("Add First Item")
                            .foregroundStyle(.primary)
                        Spacer()
                    }
                }
            } else {
                ForEach(Array(invoice.items.enumerated()), id: \.element.id) { index, item in
                    InvoiceItemRow(
                        item: item,
                        onUpdate: { updatedItem in
                            invoice.items[index] = updatedItem
                            invoice.recalculateTotals()
                        },
                        onDelete: {
                            invoice.removeItem(at: index)
                        }
                    )
                }
                
                Button {
                    showingServiceItemPicker = true
                } label: {
                    HStack {
                        Image(systemName: "plus")
                            .foregroundStyle(.blue)
                        Text("Add Item")
                            .foregroundStyle(.blue)
                        Spacer()
                    }
                }
            }
        } header: {
            HStack {
                Text("Items")
                Spacer()
                if !invoice.items.isEmpty {
                    Text("\(invoice.items.count) item\(invoice.items.count == 1 ? "" : "s")")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }
            }
        }
    }
    
    @ViewBuilder
    private var totalsSection: some View {
        Section("Summary") {
            HStack {
                Text("Subtotal")
                    .foregroundStyle(.secondary)
                Spacer()
                Text(invoice.formattedSubtotal)
                    .fontWeight(.medium)
            }
            
            if invoice.taxAmount > 0 {
                HStack {
                    Text("Tax")
                        .foregroundStyle(.secondary)
                    Spacer()
                    Text(invoice.formattedTaxAmount)
                        .fontWeight(.medium)
                }
            }
            
            if invoice.discountAmount > 0 {
                HStack {
                    Text("Discount")
                        .foregroundStyle(.secondary)
                    Spacer()
                    Text("-\(invoice.formattedDiscountAmount)")
                        .fontWeight(.medium)
                        .foregroundStyle(.orange)
                }
            }
            
            Divider()
            
            HStack {
                Text("Total")
                    .font(.headline)
                    .fontWeight(.semibold)
                Spacer()
                Text(invoice.formattedTotal)
                    .font(.headline)
                    .fontWeight(.semibold)
                    .foregroundStyle(.blue)
            }
        }
    }
    
    @ViewBuilder
    private var templateSection: some View {
        Section("Template") {
            Button {
                showingTemplateSelection = true
            } label: {
                HStack {
                    Image(systemName: "doc.richtext")
                        .foregroundStyle(.purple)
                    
                    VStack(alignment: .leading, spacing: 2) {
                        Text(selectedTemplate?.displayName ?? "Modern Blue")
                            .foregroundStyle(.primary)
                        Text("Tap to change template")
                            .font(.caption)
                            .foregroundStyle(.secondary)
                    }
                    
                    Spacer()
                    
                    Image(systemName: "chevron.right")
                        .font(.caption)
                        .foregroundStyle(.tertiary)
                }
            }
        }
    }
    
    @ViewBuilder
    private var notesSection: some View {
        Section("Additional Information") {
            TextField(
                "Notes or special instructions...",
                text: Binding(
                    get: { invoice.notes ?? "" },
                    set: { invoice.notes = $0.isEmpty ? nil : $0 }
                ),
                axis: .vertical
            )
            .lineLimit(3, reservesSpace: true)
            
            TextField(
                "Payment terms...",
                text: Binding(
                    get: { invoice.paymentTerms ?? "" },
                    set: { invoice.paymentTerms = $0.isEmpty ? nil : $0 }
                ),
                axis: .vertical
            )
            .lineLimit(2, reservesSpace: true)
        }
    }
    
    // MARK: - Methods
    
    private func setupNewInvoice() {
        guard invoice.invoiceNumber.isEmpty else { return }
        
        // Generate invoice number from business profile
        if let profile = businessProfile {
            let nextNumber = profile.nextInvoiceNumber
            invoice.invoiceNumber = "\(profile.invoicePrefix)-\(String(format: "%03d", nextNumber))"
        } else {
            invoice.invoiceNumber = "INV-001"
        }
    }
    
    private func saveInvoice(status: InvoiceStatus) {
        isLoading = true
        
        Task {
            await saveToDatabase(status: status)
            
            await MainActor.run {
                isLoading = false
                dismiss()
            }
        }
    }
    
    private func saveToDatabase(status: InvoiceStatus) async {
        do {
            invoice.updateStatus(status)
            invoice.client = selectedClient
            
            let entity = invoice.toEntity()
            
            // Associate with business profile
            if let businessProfile = businessProfiles.first {
                entity.businessProfile = businessProfile
                
                // Update next invoice number
                if invoice.invoiceNumber.hasPrefix(businessProfile.invoicePrefix) {
                    businessProfile.nextInvoiceNumber += 1
                }
            }
            
            // Associate with client
            if let selectedClient = selectedClient {
                let clientEntity = findOrCreateClientEntity(for: selectedClient)
                entity.client = clientEntity
            }
            
            // Create invoice items
            for (index, item) in invoice.items.enumerated() {
                let itemEntity = InvoiceItemEntity(
                    id: item.id,
                    itemDescription: item.description,
                    quantity: item.quantity,
                    unitPrice: item.rate,
                    taxRate: item.taxRate,
                    discountAmount: item.discountAmount,
                    category: item.category,
                    sku: item.sku,
                    notes: item.notes,
                    sortOrder: index
                )
                itemEntity.invoice = entity
                entity.items.append(itemEntity)
                modelContext.insert(itemEntity)
            }
            
            modelContext.insert(entity)
            try modelContext.save()
            
        } catch {
            print("Failed to save invoice: \(error)")
        }
    }
    
    private func findOrCreateClientEntity(for client: Client) -> ClientEntity {
        let descriptor = FetchDescriptor<ClientEntity>(
            predicate: #Predicate<ClientEntity> { entity in
                entity.id == client.id
            }
        )
        
        do {
            let results = try modelContext.fetch(descriptor)
            if let existingEntity = results.first {
                return existingEntity
            }
        } catch {
            print("Failed to fetch client entity: \(error)")
        }
        
        // Create new client entity
        let newEntity = ClientEntity(
            id: client.id,
            name: client.name,
            email: client.email,
            phone: client.phone,
            website: client.website,
            taxNumber: client.taxNumber,
            notes: client.notes,
            isActive: client.isActive
        )
        
        if let address = client.address {
            newEntity.address = AddressEntity(from: address)
        }
        
        modelContext.insert(newEntity)
        return newEntity
    }
}

// MARK: - Supporting Views

private struct InvoiceItemRow: View {
    @State private var item: InvoiceItem
    let onUpdate: (InvoiceItem) -> Void
    let onDelete: () -> Void
    
    @State private var isExpanded = false
    
    init(item: InvoiceItem, onUpdate: @escaping (InvoiceItem) -> Void, onDelete: @escaping () -> Void) {
        self._item = State(initialValue: item)
        self.onUpdate = onUpdate
        self.onDelete = onDelete
    }
    
    var body: some View {
        VStack(spacing: 8) {
            // Basic Info Row
            HStack {
                VStack(alignment: .leading, spacing: 2) {
                    Text(item.name)
                        .font(.headline)
                        .fontWeight(.medium)
                    
                    if !item.description.isEmpty {
                        Text(item.description)
                            .font(.caption)
                            .foregroundStyle(.secondary)
                            .lineLimit(isExpanded ? nil : 1)
                    }
                }
                
                Spacer()
                
                VStack(alignment: .trailing, spacing: 2) {
                    Text(formatCurrency(item.total))
                        .font(.headline)
                        .fontWeight(.semibold)
                    
                    Text("\(formatDecimal(item.quantity)) × \(formatCurrency(item.rate))")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }
            }
            
            // Expanded Details
            if isExpanded {
                VStack(spacing: 8) {
                    Divider()
                    
                    HStack {
                        Text("Quantity")
                            .frame(width: 80, alignment: .leading)
                        TextField("1", value: $item.quantity, format: .number)
                            .textFieldStyle(.roundedBorder)
                            .frame(width: 80)
                            #if os(iOS)
                            .keyboardType(.decimalPad)
                            #endif
                        
                        Spacer()
                        
                        Text("Rate")
                            .frame(width: 40, alignment: .leading)
                        TextField("0.00", value: $item.rate, format: .currency(code: "USD"))
                            .textFieldStyle(.roundedBorder)
                            .frame(width: 100)
                            #if os(iOS)
                            .keyboardType(.decimalPad)
                            #endif
                    }
                    .font(.caption)
                    
                    if item.taxRate > 0 {
                        HStack {
                            Text("Tax Rate")
                                .frame(width: 80, alignment: .leading)
                            TextField("0", value: $item.taxRate, format: .percent)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 80)
                                #if os(iOS)
                                .keyboardType(.decimalPad)
                                #endif
                            
                            Spacer()
                        }
                        .font(.caption)
                    }
                    
                    HStack {
                        Button("Delete", role: .destructive) {
                            onDelete()
                        }
                        .font(.caption)
                        
                        Spacer()
                        
                        Button("Done") {
                            item.updateTotal()
                            onUpdate(item)
                            isExpanded = false
                        }
                        .font(.caption)
                        .fontWeight(.semibold)
                    }
                }
            }
        }
        .contentShape(Rectangle())
        .onTapGesture {
            withAnimation {
                isExpanded.toggle()
            }
        }
        .onChange(of: item.quantity) { _, _ in
            item.updateTotal()
            onUpdate(item)
        }
        .onChange(of: item.rate) { _, _ in
            item.updateTotal()
            onUpdate(item)
        }
        .onChange(of: item.taxRate) { _, _ in
            item.updateTotal()
            onUpdate(item)
        }
    }
    
    private func formatCurrency(_ amount: Decimal) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.currencyCode = "USD"
        return formatter.string(from: amount as NSDecimalNumber) ?? "$0.00"
    }
    
    private func formatDecimal(_ amount: Decimal) -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.maximumFractionDigits = 2
        return formatter.string(from: amount as NSDecimalNumber) ?? "0"
    }
}

#Preview {
    InvoiceBuilderView()
        .modelContainer(SwiftDataStack.shared.modelContainer)
}